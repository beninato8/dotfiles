# mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}
# https://stackoverflow.com/questions/793858/how-to-mkdir-only-if-a-dir-does-not-already-exist
# mkdir -p sa{1..50}/sax{1..50}
# https://askubuntu.com/questions/731721/is-there-a-way-to-create-multiple-directories-at-once-with-mkdir

alias exp="echo \"mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}\""

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias -- -="cd ~-"

alias o='open .; osascript -e "tell application \"Finder\" to activate"'
alias r='rename-subs'
alias vlc='/Applications/VLC.app/Contents/MacOS/VLC -f --rate 2'
alias wallpaper='vlc --video-wallpaper'
alias ytdlbest="youtube-dl -f 'bestvideo+bestaudio/best'"
alias yt="youtube-dl -f 'bestvideo[height<=1080]+bestaudio/best[height<=1080]'"
alias ytdl="youtube-dl"
alias ytf="ytdl -F"
alias ytp="ytdl -f 22"
alias steg='java -jar ~/GitHub/ctfs/tools/steganography/Stegsolve.jar'
alias nms='nms -a'

alias ls="ls -CFAG"
alias l="ls -lAhFoG"
alias cp='cp -i'
alias mkdir='mkdir -p'
alias g='grep -i'

alias du='du -sch'
alias size="globs;\du -sch * .* | gsort -h"
# alias du='du -sch .[!.]* *'

alias z='exec zsh'
# alias z=' export PATH=""; exec zsh; typeset -U PATH'
alias a='subl ~/.aliases'
alias zz='subl ~/.zshrc'

# alias c='cd ~/GitHub/pactf'
alias d='cd ~/Desktop'
# alias b='cd ~/GitHub/beninato8-P1-PythonML/'
alias myfortune='fortune -ae 50% /usr/local/Cellar/fortune/9708/share/games/fortunes/off /usr/local/Cellar/fortune/9708/share/games/fortunes/ 10% /Users/Nicholas/.oh-my-zsh/plugins/chucknorris/fortunes/chucknorris'

alias pip3="python3 -m pip"
alias pip="python3 -m pip"
# alias reinstallpython=''

alias exif="exiftool -all="

alias ffmpeg="ffmpeg -hide_banner"

alias say="say -i -r 200"
alias sayo="\say -r 200 -o"
alias lsregister="/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister"
alias register="lsregister -f"

alias speedtest="speedtest --bytes"
alias speed="speedtest --bytes"
alias speeed="speedtest --bytes"
alias speeeed="speedtest --bytes"
alias speeeeed="speedtest --bytes"
alias speeeeeed="speedtest --bytes"
alias speeeeeeed="speedtest --bytes"
alias speeeeeeeed="speedtest --bytes"
alias speeeeeeeeed="speedtest --bytes"
alias speeeeeeeeeed="speedtest --bytes"
alias connor="mcstatus 23.95.30.204:25565 status"

alias w=where

alias ks="kill -STOP"
alias kc="kill -CONT"

alias stop="kill -STOP $(ps -ef | grep java | awk '{print $2}' | sed -n '2 p' | grep '\S')"
alias stahp="stop"
alias cont="kill -CONT $(ps -ef | grep java | awk '{print $2}' | sed -n '2 p' | grep '\S')"
alias mc="echo $(ps -ef | grep java | awk '{print $2}' | sed -n '2 p' | grep '\S')"

alias clean='brew cleanup -s --prune=0 $(brew list | grep -v ^python$) $(brew cask list)'

alias please='sudo $(fc -ln -1)'

alias dim='ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0'

alias nompv='brew uninstall --force --ignore-dependencies mpv'
alias brew-all='brew update; brew upgrade; nompv; brew cask upgrade; brew cask doctor; brew doctor; clean'

alias termdown='termdown -W'
alias t='termdown'
alias clock='t -zZ "%H : %M : %S"'

alias globs='setopt nocaseglob; setopt nullglob'
alias sum_numbers="paste -s -d+ - | bc"
alias seconds='ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1'
alias sum_files='globs; for m in *.{MOV,MP4,MKV,AVI,M4V}; do seconds $m; done | sum_numbers'
alias sum_folders='globs; for f in *(/); do cd $f; sum_files; cd ..; done | sum_numbers'

alias psa='ps aux | g'

alias h='subl ~/.zsh_history'

alias u='unzip *.zip'

alias storage="df -h | head -2 | tail -1 | awk '{print \$4}'"
alias free=storage

alias update='brew-all && pyenv-update'

alias empty='trash -ey;free'

alias mvs='globs; unzip *.zip && rename-subs; mkdir subs; for f in *.srt; do nohi $f; mv $f subs; done; rm *addic7ed*'
alias mmvs='mvs; sleep 2; mv subs/* .; rm -r subs; rm *.zip; r movie; vlc *'

alias reboot_sound="sudo kill $(ps aux -U root | g /coreaudiod | g -v grep | awk '{print $2}'); z"

alias aria2c='aria2c --file-allocation=none -d ~/Desktop/yt'
alias dl='aria2c'

alias ad="addic7ed search"

alias po='vlc -f --rate 1 "$(\ls | sort -R | tail -1)"'

alias v='cd ~/v'
alias viz='~/bin/battery_cycles_visualizer; ~/bin/battery_health_visualizer'

alias ss='mkdir subs; for f in *.mkv; do subs $f; done; for f in *.srt; do mv $f subs; done;'
alias ss2='mkdir subs; for f in *.mkv; do subs $f; done; for f in *.srt; do mv $f subs; done;'
alias ss3='mkdir subs; for f in *.mkv; do subs $f 3; done; for f in *.srt; do mv $f subs; done;'

alias exts="find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort -u"

alias pngcrush='/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/pngcrush'

gitNewRepo()
{
    #$1 = repo name
    mkdir -p "$1"
    cd "$1"
    echo \# "$1" >> README.md
    cp ../LICENSE LICENSE
    touch .gitignore
    git init
    git add README.md LICENSE .gitignore
    git commit -m "first commit"
    git remote add origin "https://github.com/beninato8/"$1".git"
    git push -u origin master
}
alias gnewrepo=gitNewRepo

gitCommit()
{
    git commit -m "$(echo $@)"
}
alias gc="gitCommit"

gitAddCommitPush()
{
    if ((${#*[@]} > 1)); then
        git add "$1"
        gc ${@:2}
        git push
    else
        echo "Not enough arguments in \"$@\""
    fi

    
}
alias gg='gitAddCommitPush'

alias gmv="git mv -k"
alias ga="git add"
alias gaa="git add -A"  
alias gs="gpl; git gc --auto; git status"  
alias gundo="git reset HEAD~"
alias gpl="git pull"
alias gps="git push"
alias gph="git push"
alias gpsh="git push"
alias gurl="z; echo ${$(git config remote.origin.url)%.*}"
# alias gopen="open $(gurl)/tree/master${$(`pwd`)#*2}"
# alias gbrowser="gopen"
alias gcheck='cd ~/Github; for d in *(/); do cd $d; echo; pwd; gs; ..; done'
alias git-clean='git gc --prune=now --aggressive'
alias gclean='cd ~/Github; for d in *(/); do cd $d; echo; pwd; git-clean; ..; done'
alias gdiff='git diff'
alias gd='git diff'
alias git-email="git log --format='%ae' | gsort | uniq"

yadmCommit()
{
    yadm commit -m "$(echo $@)"
}
alias yc="yadmCommit"
alias ya="yadm add"
alias ys="yadm status"
alias yps="yadm push"


makeNewFile()
{
    #$1 = /path/file
    touch $1
    subl $1
}
alias f=makeNewFile

searchInFile()
{
    #$1 = path
    #$2 = text
    grep -rinl $1 -e "$2"
}
# alias ff=searchInFile
alias ff="grep -rin"

searchForFileName()
{
    #$1 = text
    find . -iname "*$1*" || sudo find . -iname "*$1*"
}
alias fn=searchForFileName

searchInFilesOfType()
{
    #$1 = path
    #$2 = extension
    #$3 = text
    find $1 -name "*.$2" -exec grep -i "$3" {} \; -print || sudo find $1 -name "*.$2" -exec grep -i "$3" {} \; -print
}
alias ft=searchInFilesOfType

makeExecutable()
{
    chmod +x $1 || sudo chmod +x $1
}
alias x=makeExecutable

goToNewFolder()
{
    #$1 = directory
    mkdir -p $1
    cd $1
}
# alias d=goToNewFolder
alias mm=goToNewFolder

runPython()
{
    #$@ = python program with optional args
    python3 "$@"
}
alias p=runPython

decodeString64()
{
    #$1 = string
    IN="$(echo $1 | tr -d '\n')"
    echo $IN | base64 --decode && echo
}
alias decode=decodeString64

bruteForceCesar()
{
    IN="$(echo "$@"|awk '{print toupper($0)}')"
    IN="$(echo $IN | tr -d '\n')"
    echo $IN
    for I in $(seq 25); do
        echo $I $IN | tr $(printf %${I}s | tr ' ' '.')\A-Z A-ZA-Z
    done
}
alias cesar=bruteForceCesar

binaryToASCII()
{
    #$1 = input
    echo $1 | perl -lpe '$_=pack"B*",$_'
}
alias bta=binaryToASCII

ASCIItoBinary()
{
    #$1 = input
    echo $1 | perl -lpe '$_=join "", unpack"(B8)*"'
}
alias atb=ASCIItoBinary

binaryToDecimal()
{
    #$1 = input
    echo $((2#$1))
}
alias btd=binaryToDecimal

subtitleExtract()
{
    #$1 = file
    #$2 = track num
    mkvextract tracks $1 $2:${1[0,-4]}srt
}
alias extract=subtitleExtract

trackNumbers()
{
    #$1 = file
    mkvmerge -i $1
}
alias tracks=trackNumbers

makeGif()
{
    #$1 = file
    palette="/tmp/palette.png"

    filters="fps=15"

    ffmpeg -v warning -i $1 -vf "$filters,palettegen=stats_mode=diff" -y $palette

    ffmpeg -i $1 -i $palette -lavfi "$filters,paletteuse=dither=bayer:bayer_scale=5:diff_mode=rectangle" -y ${1[0,-4]}gif
    # ffmpeg -i $1 ${1[0,-4]}gif
}
alias gif=makeGif

encodeVideo()
{
    #$1 = file
    ffmpeg -i "$1" -crf 18 -c:v libx264 -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" -preset fast -c:a libmp3lame -b:a 320k "${1[0,-5]}_encoded.mp4"
}
alias encode=encodeVideo

scaleMedia()
{
    #$1 = file
    #$2 = width
    ffmpeg -i $1 -vf "scale=trunc($2/2)*2:-1" ${1[0,-5]}"_w=$2"${1[-4,-1]}
}
alias scale=scaleMedia

extractAudio()
{
    ffmpeg -i $1 -q:a 3 -map a ${1[0,-4]}mp3
}
alias audio=extractAudio

extractThumbnail()
{
    ffmpeg -i $1 -vf "select=eq(n\,0)" -q:v 3 ${1[0,-4]}jpg
}
alias thumb=extractThumbnail

extractCoverArt()
{
    ffmpeg -i $1 -an -vcodec copy ${1[0,-4]}jpg
}
alias cover=extractCoverArt

searchHistory()
{
    #$1 = term
    fc -l 1 | grep -i "$1"
}
alias hg=searchHistory

fileCD()
{
    [ -f "$1" ] && { cd "$(dirname "$1")"; } || { cd "$1"; } #; pwd;
}
alias cd=fileCD

quicklook()
{
    qlmanage -p $1 > /dev/null 2>&1
}
alias q=quicklook

makeSubsSRT()
{
    mv $1 ${1[0,-4]}
    ffmpeg -i ${1[0,-4]} ${1[0,-4]}srt
    mv ${1[0,-4]} ~/.Trash/
}
alias srt=makeSubsSRT

extractAndConvertSubs()
{
    num=2
    if [[ $2 ]]; then
        num="$2"
    fi
    extract $1 $num
    srt ${1[0,-4]}srt
    nohi ${1[0,-4]}srt
}
alias subs=extractAndConvertSubs

getExtension()
{
    fullname=$(basename -- "$1")
    extension="${fullname##*.}"
    echo $extension
}
alias ext=getExtension

getFileName()
{
    fullname=$(basename -- "$1")
    filename="${fullname%.*}"
    echo $filename
}
alias name=getFileName

getImageDimension()
{
    identify -format "%w %h\n" $1
}
alias imgdim=getImageDimension

getImageWidth()
{
    identify -format "%w" $1
}
alias width=getImageWidth

getImageHeight()
{
    identify -format "%h" $1
}
alias height=getImageHeight

getImageResolution()
{
    identify -format '%x\n' $1
}
alias dpi=getImageResolution

makeSquare()
{
    convert $1 -gravity center -crop `identify -format "%[fx:min(w,h)]x%[fx:min(w,h)]+0+0" $1` +repage $(name $1)_square.jpg
}
alias square_crop=makeSquare

squarize()
{
    pic=$1
    convert $pic -trim $pic
    width=$(identify -format "%w" $pic)
    height=$(identify -format "%h" $pic)
    new_dim=$((width > height ? width+10 : height+10))
    convert $pic -gravity center -extent "${new_dim}x${new_dim}" $(name $pic).$(ext $pic)
}
alias square=squarize

javaCompileRun()
{
    #$1 = file
    f="$(name $1)"
    javac $1
    java $f $f.class
}
alias j=javaCompileRun

moveAndMakeDirectory()
{
    # args=${@%/}
    folder=${@: -1}
    folder=${folder%/}
    mkdir $folder

    files=""
    for f in $@; do
        files=$files"\n"$f
    done
    files=$(echo $files | tail -n +2 | ghead -n -1)
    while read -r f; do
        mv $f $folder/$f
    done <<< "$files"
}
alias mvm=moveAndMakeDirectory

countFiles()
{
    \ls $1 | wc -l
}
alias count=countFiles

splitImageVertically()
{
    mkdir split
    img="$1"
    size=$(echo "100/$2" | bc)

    convert -crop $size%x100% +repage "$img" "split/$(name $img)_%d.$(ext $img)"
}
alias split=splitImageVertically

splitMulti()
{
    num=2
    if [[ $1 ]]; then
        num="$1"
    fi
    for f in *.{jpg,png}; do 
        split "$f" $num; 
    done
}
alias splitall='splitMulti'

cropToSquare()
{
    side=256
    if [[ $2 ]]; then
        side="$2"
    fi
    convert -define jpeg:size="$side"x"$side" "$1" -thumbnail "$side"x"$side"^ -gravity center -extent "$side"x"$side" "$1"
}
alias mkth=cropToSquare

expandToSquare()
{
    color=white
    if [[ $2 ]]; then
        color="$2"
    fi
    convert $1 \( +clone -rotate 90 +clone -mosaic +level-colors "$color" \) +swap -gravity center -composite $1
}
alias expsq=expandToSquare

openTensorboard()
{
    open "http://localhost:6006/#images"
    tensorboard "$@"
}
alias tensorboard=openTensorboard

# find / -iname "term" 2>&1 | grep -v "denied"
# convert -colorspace rgb -density 1024 f-colsealceps.eps -scale 1024x1024 f-colsealceps.pdf